/**
 * 智能媒体助手 - SillyTavern插件
 * 作者: kencuo
 * 功能: 为外部应用提供媒体文件处理能力
 */

import { getBase64Async, getStringHash, saveBase64AsFile } from '../../../utils.js';

import { extension_settings, getContext } from '../../../extensions.js';

import { saveSettingsDebounced } from '../../../../script.js';

// 插件配置
const PLUGIN_CONFIG = {
  name: 'MediaAssistant',
  displayName: '智能媒体助手',
  version: '1.0.0',
  author: 'kencuo',
};

// 默认设置
const DEFAULT_SETTINGS = {
  enabled: true,
  autoCompress: true,
  imageQuality: 0.8,
  maxFileSize: 5, // MB
  supportedFormats: ['jpg', 'jpeg', 'png', 'gif', 'webp'],
  saveByDate: true,
  enableLogging: false,
};

// 全局变量
let pluginSettings = {};
let isInitialized = false;

/**
 * 媒体处理核心类
 */
class MediaProcessor {
  constructor(settings) {
    this.settings = settings;
    this.compressionCanvas = null;
  }

  /**
   * 验证文件类型和大小
   */
  validateFile(file) {
    if (!file || typeof file !== 'object') {
      throw new Error('无效的文件对象');
    }

    if (!file.type.startsWith('image/')) {
      throw new Error('仅支持图片文件');
    }

    const fileSizeMB = file.size / (1024 * 1024);
    if (fileSizeMB > this.settings.maxFileSize) {
      throw new Error(`文件大小超过限制 (${this.settings.maxFileSize}MB)`);
    }

    const fileExt = file.type.split('/')[1]?.toLowerCase();
    if (!this.settings.supportedFormats.includes(fileExt)) {
      throw new Error(`不支持的文件格式: ${fileExt}`);
    }

    return true;
  }

  /**
   * 压缩图片
   */
  async compressImage(file) {
    if (!this.settings.autoCompress) {
      return file;
    }

    return new Promise(resolve => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();

      img.onload = () => {
        // 计算压缩后的尺寸
        const maxWidth = 1920;
        const maxHeight = 1080;
        let { width, height } = img;

        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }

        canvas.width = width;
        canvas.height = height;
        ctx.drawImage(img, 0, 0, width, height);

        canvas.toBlob(resolve, file.type, this.settings.imageQuality);
      };

      img.src = URL.createObjectURL(file);
    });
  }

  /**
   * 生成唯一文件名
   */
  generateFileName(originalName, characterName) {
    const timestamp = Date.now();
    const hash = getStringHash(originalName + timestamp);
    const extension = originalName.split('.').pop() || 'png';

    if (this.settings.saveByDate) {
      const date = new Date().toISOString().split('T')[0];
      return `${date}_${hash}.${extension}`;
    }

    return `${characterName}_${timestamp}_${hash}.${extension}`;
  }

  /**
   * 记录日志
   */
  log(message, type = 'info') {
    if (this.settings.enableLogging) {
      console.log(`[${PLUGIN_CONFIG.displayName}] ${type.toUpperCase()}: ${message}`);
    }
  }
}

/**
 * 主要的媒体上传函数 - 暴露给外部使用
 */
window.MediaAssistantUpload = async function (file, options = {}) {
  try {
    if (!isInitialized) {
      throw new Error('媒体助手插件未初始化');
    }

    if (!pluginSettings.enabled) {
      throw new Error('媒体助手插件已禁用');
    }

    const processor = new MediaProcessor(pluginSettings);

    // 验证文件
    processor.validateFile(file);
    processor.log(`开始处理文件: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);

    // 压缩图片（如果启用）
    const processedFile = await processor.compressImage(file);

    // 转换为base64
    const base64Data = await getBase64Async(processedFile);
    const base64Content = base64Data.split(',')[1];

    // 获取角色信息
    const context = getContext();
    const currentChar = context.characters[context.characterId];
    const characterName = currentChar?.name || 'default';

    // 生成文件名
    const fileName = processor.generateFileName(file.name, characterName);

    // 保存文件
    const savedUrl = await saveBase64AsFile(
      base64Content,
      characterName,
      fileName.split('.')[0], // 不包含扩展名
      fileName.split('.').pop(), // 扩展名
    );

    processor.log(`文件保存成功: ${savedUrl}`);

    // 返回结果
    return {
      success: true,
      url: savedUrl,
      originalSize: file.size,
      processedSize: processedFile.size,
      fileName: fileName,
      characterName: characterName,
      timestamp: Date.now(),
    };
  } catch (error) {
    console.error(`[${PLUGIN_CONFIG.displayName}] 上传失败:`, error);
    throw error;
  }
};

/**
 * 获取插件状态信息
 */
window.MediaAssistantStatus = function () {
  return {
    initialized: isInitialized,
    enabled: pluginSettings.enabled,
    version: PLUGIN_CONFIG.version,
    settings: { ...pluginSettings },
  };
};

/**
 * 加载插件设置
 */
async function loadPluginSettings() {
  extension_settings[PLUGIN_CONFIG.name] = extension_settings[PLUGIN_CONFIG.name] || {};

  if (Object.keys(extension_settings[PLUGIN_CONFIG.name]).length === 0) {
    Object.assign(extension_settings[PLUGIN_CONFIG.name], DEFAULT_SETTINGS);
  }

  pluginSettings = extension_settings[PLUGIN_CONFIG.name];

  // 更新UI
  updateSettingsUI();
}

/**
 * 更新设置界面
 */
function updateSettingsUI() {
  $('#mediaAssistantEnabled').prop('checked', pluginSettings.enabled);
  $('#mediaAutoCompress').prop('checked', pluginSettings.autoCompress);
  $('#mediaImageQuality').val(pluginSettings.imageQuality);
  $('#mediaMaxFileSize').val(pluginSettings.maxFileSize);
  $('#mediaSaveByDate').prop('checked', pluginSettings.saveByDate);
  $('#mediaEnableLogging').prop('checked', pluginSettings.enableLogging);

  // 更新状态指示器
  const statusIndicator = $('.media-status-indicator');
  if (pluginSettings.enabled) {
    statusIndicator.removeClass('media-status-inactive').addClass('media-status-active');
  } else {
    statusIndicator.removeClass('media-status-active').addClass('media-status-inactive');
  }
}

/**
 * 保存设置
 */
function savePluginSettings() {
  extension_settings[PLUGIN_CONFIG.name] = pluginSettings;
  saveSettingsDebounced();
}

/**
 * 设置事件处理器
 */
function setupEventHandlers() {
  // 启用/禁用开关
  $('#mediaAssistantEnabled').on('change', function () {
    pluginSettings.enabled = $(this).prop('checked');
    savePluginSettings();
    updateSettingsUI();

    if (pluginSettings.enabled) {
      toastr.success('智能媒体助手已启用', '媒体助手');
    } else {
      toastr.warning('智能媒体助手已禁用', '媒体助手');
    }
  });

  // 自动压缩开关
  $('#mediaAutoCompress').on('change', function () {
    pluginSettings.autoCompress = $(this).prop('checked');
    savePluginSettings();
  });

  // 图片质量设置
  $('#mediaImageQuality').on('change', function () {
    pluginSettings.imageQuality = parseFloat($(this).val());
    savePluginSettings();
  });

  // 最大文件大小设置
  $('#mediaMaxFileSize').on('change', function () {
    pluginSettings.maxFileSize = parseInt($(this).val());
    savePluginSettings();
  });

  // 按日期保存开关
  $('#mediaSaveByDate').on('change', function () {
    pluginSettings.saveByDate = $(this).prop('checked');
    savePluginSettings();
  });

  // 日志开关
  $('#mediaEnableLogging').on('change', function () {
    pluginSettings.enableLogging = $(this).prop('checked');
    savePluginSettings();
  });
}

/**
 * 创建设置界面HTML
 */
function createSettingsHTML() {
  return `
    <div class="media-assistant-container">
        <div class="media-assistant-title">
            <span class="media-status-indicator"></span>
            智能媒体助手
        </div>

        <div class="media-setting-group">
            <label class="media-setting-label">
                <span>启用媒体助手</span>
                <label class="media-toggle-switch">
                    <input type="checkbox" id="mediaAssistantEnabled">
                    <span class="media-toggle-slider"></span>
                </label>
            </label>
            <div class="media-info-text">为外部应用提供媒体文件上传和处理功能</div>
        </div>

        <div class="media-setting-group">
            <label class="media-setting-label">
                <span>自动压缩图片</span>
                <label class="media-toggle-switch">
                    <input type="checkbox" id="mediaAutoCompress">
                    <span class="media-toggle-slider"></span>
                </label>
            </label>
            <div class="media-info-text">自动压缩大图片以节省存储空间和提高传输速度</div>
        </div>

        <div class="media-setting-group">
            <label class="media-setting-label" for="mediaImageQuality">图片压缩质量</label>
            <select id="mediaImageQuality" class="media-quality-selector">
                <option value="0.6">高压缩 (60%)</option>
                <option value="0.8">标准 (80%)</option>
                <option value="0.9">高质量 (90%)</option>
                <option value="1.0">无损 (100%)</option>
            </select>
            <div class="media-info-text">压缩质量越高，文件越大但画质越好</div>
        </div>

        <div class="media-setting-group">
            <label class="media-setting-label" for="mediaMaxFileSize">最大文件大小 (MB)</label>
            <select id="mediaMaxFileSize" class="media-quality-selector">
                <option value="2">2 MB</option>
                <option value="5">5 MB</option>
                <option value="10">10 MB</option>
                <option value="20">20 MB</option>
            </select>
            <div class="media-info-text">超过此大小的文件将被拒绝上传</div>
        </div>

        <div class="media-setting-group">
            <label class="media-setting-label">
                <span>按日期分类保存</span>
                <label class="media-toggle-switch">
                    <input type="checkbox" id="mediaSaveByDate">
                    <span class="media-toggle-slider"></span>
                </label>
            </label>
            <div class="media-info-text">启用后将按日期创建文件夹来组织文件</div>
        </div>

        <div class="media-setting-group">
            <label class="media-setting-label">
                <span>启用调试日志</span>
                <label class="media-toggle-switch">
                    <input type="checkbox" id="mediaEnableLogging">
                    <span class="media-toggle-slider"></span>
                </label>
            </label>
            <div class="media-info-text">在控制台输出详细的处理日志，用于调试</div>
        </div>
    </div>
    `;
}

/**
 * 插件初始化
 */
jQuery(async () => {
  try {
    // 添加设置界面到扩展面板
    const settingsHTML = createSettingsHTML();
    $('#extensions_settings2').append(settingsHTML);

    await loadPluginSettings();
    setupEventHandlers();
    isInitialized = true;

    console.log(`[${PLUGIN_CONFIG.displayName}] v${PLUGIN_CONFIG.version} 初始化完成`);

    if (pluginSettings.enabled) {
      toastr.info('智能媒体助手已就绪', '媒体助手');
    }
  } catch (error) {
    console.error(`[${PLUGIN_CONFIG.displayName}] 初始化失败:`, error);
    toastr.error('智能媒体助手初始化失败', '媒体助手');
  }
});
